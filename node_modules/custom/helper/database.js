
var connection=require('custom/dbConnect');

function removeEmptyVariables(conditions,variables) {



    for (var key in conditions) {


        if(key=='condition_group'){

           // removeEmptyVariables(conditions.key[1],variables);

            continue;

        }

        if (variables[key] == undefined ||
            variables[key] == '' ||
            variables[key] == '-1' ||
            (
                Array.isArray(variables[key]) &&
                variables[key].indexOf('-1') != -1
            )
        ) {
            delete conditions[key];

        }
    }
  return conditions;

}

function removeUnfillable(data,fillable){

    var fillableValues={};
    for(var key in fillable){
       if(data[fillable[key]] != undefined) {fillableValues[fillable[key]]=data[fillable[key]];}
    }
    return fillableValues;

}
/* TODO queryConditions errors
 1- the value (-1) can't search for it , it mean empty value
 2- field name can't be 'condition_group'
 3-the values for search in array can't start with number then text
 'payment_in_out':[1,'rfre'],
 because the result will be
 payment_in_out  in (1,rfre)
 */

/* howToUse queryConditions(conditions,variables)

 var conditions={
 'payment_in_out': ['and','in'],
 'payment_status': ['and','in'],
 'condition_group': ['and',{'pay_date':['and','=']}],
 'worth_date':['and','='],
 'pay_date':['and','='],
 'to_user_phone':['and','like']
 };

 var values={
 'payment_in_out':[1,2],
 'payment_status': 'dumy status',
 'pay_date':'dumy date',
 'worth_date':'dumy wirth',
 'pay_date':'dumy pay date',
 'to_user_phone':'dumy phone'
 };


 result

 payment_in_out  in (1,2)
 and payment_status =dumy status
 and ( pay_date  ="dumy pay date")
 and worth_date  ="dumy wirth"
 and pay_date  ="dumy pay date"
 and to_user_phone  like "%dumy phone%"

 */
function queryConditions(conditions,variables){

    var conditionsText='';
    for(var key in conditions){

        if(key=='condition_group'){

            var subConditions='('+queryConditions(conditions[key][1],variables)+')';

            conditionsText+=(subConditions=='()')?
                '':
                ((conditionsText=='')?
                    subConditions:
                conditions[key][0]+' '+subConditions);

            continue;
        }

      if( conditions[key][2] !=undefined){
          variables[key]=conditions[key][2];
      }

        var values=(Array.isArray(variables[key]))?
            ((isNaN(variables[key][0]))? '"'+variables[key].join('","')+'"':variables[key].join(','))
            :variables[key];


        var  conditionOperator=conditions[key][1]+'"'+values+'"';

        if(conditions[key][1]=='in'){
            conditionOperator=(values.indexOf(',') != -1)?' in ('+values+')':'='+values+' ';}
        else if(conditions[key][1]=='='){ conditionOperator=' ="'+values+'"';}
        else if(conditions[key][1]=='like'){ conditionOperator=' like "%'+values+'%"';}
        conditionsText+=((conditionsText=='')?'':conditions[key][0])+' '+key+' '+conditionOperator;
    }
    return conditionsText;

}





function select(table,conditions,variables,callback){



    conditions=removeEmptyVariables(conditions,variables);
    var conditinsText=queryConditions(conditions,variables);

    conditinsText=(conditinsText.trim()=='')? '':' where '+conditinsText;

    var orderText=
        (variables['order_by']!=undefined && variables['order_by']!='')?
        ' order by `'+variables['order_by']+'` '+((variables['order_by_type']=='ask')? '':'desc')+' '
            :'order by id desc';

    var limitText=' limit '+((variables['page'] != undefined)? variables['page']*10:0)+',10';


    var getRowsQuery='select * from  '+table+'  '+conditinsText+orderText+limitText;

    var totalQuery='select count(*) as total from '+table+'   '+conditinsText;

    console.log([getRowsQuery,totalQuery]);
    var getRows=executeQuery(getRowsQuery,function(result){

        var total=executeQuery(totalQuery,function(totalResult){

            callback({
                status:result.status,
                rows:result.result,
                total:(totalResult.status ==1)?totalResult.result[0].total:0

            });

        });

    });


}





function selectWithoutCount(table,conditions,variables,callback){



    conditions=removeEmptyVariables(conditions,variables);
    var conditinsText=queryConditions(conditions,variables);

    conditinsText=(conditinsText.trim()=='')? '':' where '+conditinsText;

    var orderText=
        (variables['order_by']!=undefined && variables['order_by']!='')?
        ' order by `'+variables['order_by']+'` '+((variables['order_by_type']=='ask')? '':'desc')+' '
            :'order by id desc';




    var getRowsQuery='select * from  '+table+'  '+conditinsText+orderText;



    console.log([getRowsQuery]);
    var getRows=executeQuery(getRowsQuery,function(result){


            callback({
                status:result.status,
                rows:result.result


            });


    });


}


/* howToUse
status :
0 for error
1 done and not empty
2 no errors but empty data

result will be:
in case of select it return array of objects each object present row
in case update and insert it return

{fieldCount: 0,
affectedRows: 1,
 insertId: 16,
 serverStatus: 2,
 warningCount: 1,
 message: '',
 protocol41: true,
 changedRows: 0 }

 */

function executeQuery(queryText,callback){
    if(queryText == undefined || queryText == null || queryText == '') return false;


console.log(queryText);
    var query=connection.query(queryText,function(error,result){

        status=0;
        finalResult='';

        if(error == null){
            finalResult=result;
            status=1;
        }else{
            finalResult=error;
            status=0;
        }

        console.log(error);

        status=(Array.isArray(finalResult) && finalResult.length==0)? 2:status;

        callback({
            status:status,
            result:finalResult
        });
    });



}

function deleteRow(table,id,callback){
    var queryConditionsText='1=2';

     if(isNaN(id) ){
        callback({ status:0});
    }else{
        var queryConditionsText='id = '+id;
    }

    executeQuery('delete from `'+table+'` where '+queryConditionsText,function(result){

        var status=result.status;
        status=(status==1 && result.result.affectedRows == 0)? 2:status;
        callback({
            status:status

        });

    });
}

/* howToUse
 * table=string (name of table)
 * id = object ({id:2}) if empty it will be taking from data.id
 * data= object({id:3,name:"mohammad"}) id is not necessary it will removed from object
 * callback =function (result)
 *
 */

function update(table,id,data,fillable,callback){

    data=removeUnfillable(data,fillable);

    var queryConditionsText='1=2';

    if(isNaN(id)  ){
        if(typeof id == 'object'){
            queryConditionsText=queryConditions(id,{});
        }
        else if(data.id != undefined) {
            var queryConditionsText = 'id = ' + data.id;
        }else{
            return callback({ status:0});
        }
    }else {
        var queryConditionsText='id = '+id;
    }
    delete data['id'];
    var dataArray=[];
    for(var field in data){
        dataArray.push('`'+field+'`="'+data[field]+'"');
    }
    var dataText=dataArray.join(',');

    if(dataText.trim() ==''){
        return callback({ status:0});
    }
    executeQuery('update  `'+table+'` set '+dataText+' where '+queryConditionsText,function(result){

        var status=result.status;
        status=(status==1 && result.result.affectedRows == 0)? 2:status;
        callback({
            status:status

        });

    });
}

/* howToUse
 * table=string (name of table)
 * data= object({name:"mohammad"})
 * callback =function (result)
 *
 */

function insert(table,data,fillable,callback){
    data=removeUnfillable(data,fillable);

    var dataArray=[];
    for(var field in data){
        dataArray.push('`'+field+'`="'+data[field]+'"');
    }
    var dataText=dataArray.join(',');

    if(dataText.trim() ==''){
        return callback({ status:0});
    }
    executeQuery('insert into  `'+table+'` set '+dataText ,function(result){

        var status=result.status;
        status=(status==1 && result.result.insertId == 0)? 2:status;
        callback({
            status:status,
            insertId:result.result.insertId
        });

    });
}



function selectRelation(relation,conditions,data,selectedFields,callback){

    conditions=removeEmptyVariables(conditions,data);
    var conditinsText=queryConditions(conditions,data);

    conditinsText=(conditinsText.trim()=='')? '':' where '+conditinsText;

    var orderText=
        (data['order_by']!=undefined && data['order_by']!='')?
        ' order by `'+data['order_by']+'` '+((data['order_by_type']=='ask')? '':'desc')+' '
            :'order by '+relation.table+'.id desc';

    var limitText=' limit '+((data['page'] != undefined)? data['page']*10:0)+',10';


    var dataText=queryConditions(data,{});


    dataText=(dataText.trim() == '')? '':'where '+dataText;


    var getRowsQuery='select '+selectedFields.join(',')+' from '+
    relation.table+' inner join '+relation.relationTable+
    ' on '+relation.table+'.id='+relation.relationTable+'.'+relation.forignKey +
    '  '+conditinsText+' '+orderText+' '+limitText;
    console.log(getRowsQuery);

var totalQuery='select count(*) as total from '+
    relation.table+' inner join '+relation.relationTable+
    ' on '+relation.table+'.id='+relation.relationTable+'.'+relation.forignKey +
    '  '+conditinsText;
    var getRows=executeQuery(getRowsQuery,function(result){

        var total=executeQuery(totalQuery,function(totalResult){

            callback({
                status:result.status,
                rows:result.result,
                total:(totalResult.status ==1)?totalResult.result[0].total:0

            });

        });

    });




}

module.exports.queryConditions= queryConditions;
module.exports.executeQuery=executeQuery;
module.exports.select=select;
module.exports.selectWithoutCount=selectWithoutCount;

module.exports.deleteRow=deleteRow;
module.exports.update=update;
module.exports.insert=insert;

module.exports.selectRelation=selectRelation;